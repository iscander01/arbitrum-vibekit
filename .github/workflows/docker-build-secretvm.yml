name: Build and Push Docker Image

on:
  push:
    tags: "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set lowercase repository name
        id: set_repo
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Validate Dockerfile and referenced files
        id: validate
        run: |
          echo "Validating Dockerfile: typescript/examples/swapping-agent/Dockerfile"
          
          # Check if Dockerfile exists
          if [ ! -f "typescript/examples/swapping-agent/Dockerfile" ]; then
            echo "‚ùå Error: Dockerfile not found at typescript/examples/swapping-agent/Dockerfile"
            exit 1
          fi
          
          echo "‚úÖ Dockerfile found at typescript/examples/swapping-agent/Dockerfile"
          
          # Extract COPY commands and validate file existence
          echo "üîç Checking files referenced in Dockerfile..."
          
          # Get the build context directory
          BUILD_CONTEXT="typescript/examples/swapping-agent"
          echo "Build context: $BUILD_CONTEXT"
          
          # Extract COPY commands and check if files exist
          while IFS= read -r line; do
            if [[ $line =~ ^[[:space:]]*COPY[[:space:]]+([^[:space:]]+)[[:space:]]+([^[:space:]]+)[[:space:]]*$ ]]; then
              source_path="${BASH_REMATCH[1]}"
              dest_path="${BASH_REMATCH[2]}"
              
              # Handle wildcards and multiple files
              if [[ $source_path == *"*"* ]]; then
                # For wildcards, check if any files match
                if ! ls $BUILD_CONTEXT/$source_path >/dev/null 2>&1; then
                  echo "‚ùå Error: No files found matching pattern: $source_path"
                  echo "   Expected in directory: $BUILD_CONTEXT"
                  exit 1
                else
                  echo "‚úÖ Found files matching pattern: $source_path"
                fi
              else
                # For single files, check if file exists
                if [ ! -e "$BUILD_CONTEXT/$source_path" ]; then
                  echo "‚ùå Error: File not found: $source_path"
                  echo "   Expected in directory: $BUILD_CONTEXT"
                  echo "   Full path: $BUILD_CONTEXT/$source_path"
                  exit 1
                else
                  echo "‚úÖ File found: $source_path"
                fi
              fi
            fi
          done < "typescript/examples/swapping-agent/Dockerfile"
          
          echo "‚úÖ All referenced files validated successfully"

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        id: build
        run: |
          docker build -t ghcr.io/${{ steps.set_repo.outputs.REPO_NAME }}:latest -f typescript/examples/swapping-agent/Dockerfile typescript/examples/swapping-agent


      - name: Push Docker image
        id: push
        run: |
          # Push latest first
          docker push ghcr.io/${{ steps.set_repo.outputs.REPO_NAME }}:latest
          # Tag with version and push
          docker tag ghcr.io/${{ steps.set_repo.outputs.REPO_NAME }}:latest ghcr.io/${{ steps.set_repo.outputs.REPO_NAME }}:${{ steps.get_version.outputs.VERSION }}
          docker push ghcr.io/${{ steps.set_repo.outputs.REPO_NAME }}:${{ steps.get_version.outputs.VERSION }}

          # Get the manifest digest after pushing
          MANIFEST_DIGEST=$(docker inspect ghcr.io/${{ steps.set_repo.outputs.REPO_NAME }}:latest --format='{{index .RepoDigests 0}}' | cut -d'@' -f2 | cut -d':' -f2)
          echo "IMAGE_HASH=${MANIFEST_DIGEST}" >> $GITHUB_OUTPUT          

      - name: Generate docker-compose-secretvm.yaml
        run: |
          cat > docker-compose-secretvm.yaml << EOL
          # Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.VERSION }}
          # Workflow URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          # Commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
          version: '3'
          services:
            app:
              image: ghcr.io/${{ steps.set_repo.outputs.REPO_NAME }}@sha256:${{ steps.push.outputs.IMAGE_HASH }}
              ports:
                - '3000:80'
          EOL

      - name: Commit docker-compose-secretvm.yaml
        run: |
          # Fetch all branches
          git fetch origin
          
          # Get the branch where the workflow file was committed
          BRANCH_NAME="${{ github.event.repository.default_branch }}"
          
          # Checkout the branch
          git checkout $BRANCH_NAME
          
          # Configure git
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # Add and commit changes
          git add docker-compose-secretvm.yaml
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update docker-compose-secretvm.yaml for version ${{ steps.get_version.outputs.VERSION }}"
            git push origin $BRANCH_NAME
          fi

      - name: Output Image URL
        run: |
          echo "IMAGE_URL=ghcr.io/${{ steps.set_repo.outputs.REPO_NAME }}:${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          echo "WORKFLOW_ID=${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Notify Workflow Status
        if: always()
        run: |
          echo "Workflow Status: ${{ job.status }}"
          echo "Image URL: ghcr.io/${{ steps.set_repo.outputs.REPO_NAME }}:${{ steps.get_version.outputs.VERSION }}"
          echo "Workflow ID: ${{ github.run_id }}"